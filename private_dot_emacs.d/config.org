# -*- eval: (display-line-numbers-mode); -*-
#+STARTUP: overview hidestars
#+PROPERTY: header-args :results silent
#+TAGS: TEMPORARY(t) BROKEN(b) DISABLED(d)

* Package management
  Initialize the built-in package manager.
#+begin_src emacs-lisp :tangle yes
  (require 'package)
#+end_src

** MELPA
   Add MELPA to the list of repositories.
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
#+end_src

** Init
   Once the early package management configuration is done, load and
   activate packages.
#+begin_src emacs-lisp :tangle yes
  (package-initialize)
#+end_src

** use-package
Make absolutely sure that [[https://github.com/jwiegley/use-package][use-package]] is evaluated, even if this file
gets compiled (read the [[help:eval-when-compile][manual page]] for more information).
#+begin_src emacs-lisp :tangle yes
  (eval-when-compile
    (require 'use-package))
#+end_src

* Definitions

** Autoloads
   Since not everything is managed through [[*use-package][use-package]]'s autoloading macros,
   autoloads for some delayed function definitions must be added early in the
   file, so that hard dependencies are broken.

   This is an insertion point for all those autoloads.
   #+begin_src emacs-lisp :tangle yes :noweb no-export
     <<early-autoload>>
   #+end_src

** Custom functions

*** Restart a dead shell
Following this [[https://superuser.com/a/463388][Superuser answer]], this function restarts a shell inside a
shell-mode]] buffer. This can be useful, for example, if you left a remote
shell open and disconnected from the network.
#+begin_src emacs-lisp :tangle yes
  (defun restart-shell ()
    (interactive)
    (shell (current-buffer)))
#+end_src

*** Ediff: use both diffs when merging changes
For some reason, this functionality is not present in Ediff. Use the snippet
found in this [[https://stackoverflow.com/a/29757750/13140497][Stack Overflow answer]].
#+begin_src emacs-lisp :tangle yes
  (defun ediff-copy-both-to-C ()
    (interactive)
    (ediff-copy-diff ediff-current-difference nil 'C nil
                     (concat
                      (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                      (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
  (defun add-d-to-ediff-mode-map () (define-key ediff-mode-map "d" 'ediff-copy-both-to-C))
  (add-hook 'ediff-keymap-setup-hook 'add-d-to-ediff-mode-map)
#+end_src

*** Activate tabs for indentation
Sometimes, tabs are necessary for indentation, whether because some legacy code
uses them, or [[*Smart tabs][smart tabbing]] is active.
#+begin_src emacs-lisp :tangle yes
  (defun tal/tabs-on ()
    (setq indent-tabs-mode t))
#+end_src

*** Detecting encrypted files
Emacs can open and edit a variety of encrypted file formats. Special precautions
have to be taken when handling this kind of files, so we define here a unified
API for registering new kinds of encrypted formats and querying whether the
current buffer is associated with an encrypted file.

First, we define a global list containing the regexps that match encrypted file
formats.
#+begin_src emacs-lisp :tangle yes
  (defvar encrypted-file-name-regexps '()
    "List of regexps that match filenames of encrypted files.")
#+end_src
Then, we define a simple predicate that checks whether a filename is associated
with an encrypted file type.
#+begin_src emacs-lisp :tangle yes
  (defun encrypted-file-name-p (filename)
    "Say whether FILENAME looks like the name of an encrypted file.

  This function matches the regexps contained in
  `encrypted-file-name-regexps' against the supplied string."
    (seq-reduce
     (lambda (acc regexp)
       (or acc
           (not (null (string-match-p regexp filename)))))
     encrypted-file-name-regexps nil))
#+end_src

Now, as Emacs already comes with [[info:epa#Top][EPA]], initialize the regexp list at least with
the regexp of EPA-recognized filenames.
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'epa
    (add-to-list 'encrypted-file-name-regexps epa-file-name-regexp))
#+end_src

** External definitions

*** John McCarthy's database of random facts
Load [[https://www-formal.stanford.edu/jmc/facts.txt][JMC's database]] of random physics constants and other stuff.
#+begin_src emacs-lisp :tangle yes
  (load (concat user-emacs-directory "jmc-facts"))
#+end_src

* Customize
** Customize plug-in point
    Set the path where M-x customize saves its settings, and load from it.
#+begin_src emacs-lisp :tangle yes
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src

** Unsaved options warning prompt
    With this, Emacs prompts the user if there are non-permanent
    customization options that would be lost on termination.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'kill-emacs-query-functions 'custom-prompt-customize-unsaved-options)
#+end_src

* Packages
  What follows are the configuration directives for all third-party
  packages.

** General purpouse
   The following packages bring general-purpouse enhancements to the
   entirety of Emacs.

*** Age
[[https://github.com/anticomputer/age.el][Repo]]

Allow Emacs to operate on [[https://github.com/FiloSottile/age][Age]]-encrypted files. Also register the regexp that
matches Age filenames as a regexp of an [[*Detecting encrypted files][encrypted file]].
#+begin_src emacs-lisp :tangle yes
  (use-package age
    :ensure t
    :config
    (add-to-list 'encrypted-file-name-regexps age-file-name-regexp)
    (age-file-enable))
#+end_src

*** Native complete
[[https://github.com/CeleritasCelery/emacs-native-shell-complete][Repo]]

Enable Bash completions inside shell-mode buffers. Register an asynchronous
[[*Company][Company]] backend and shortens the list of active backends in shell mode.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package company-native-complete
    :ensure t
    :demand
    :after company
    :hook (shell-mode . (lambda nil
                          (setq-local company-backends
                                      ;; Only backends that might be relevant for a shell
                                      '((company-files company-native-complete)
                                         company-capf
                                         company-dabbrev))))
    :config
    <<native-complete-setup>>)
#+end_src

**** Setup
This package relies on a small procedure named [[help:native-complete-setup-bash][native-complete-setup-bash]] to
configure Comint and the shell subsystem that deals with Bash; in particular,
Comint is configured to emulate a VT-50 terminal instead of a 'dumb'
one. Unfortunately, this interferes with [[*Babel][Org Babel]], as it causes extraneous
characters to end up in the output of shell scripts evaluated by Org.

To avoid this, we will wrap [[help:shell][the shell command]] in a [[info:elisp#Dynamic Binding][dynamic let binding]] that
shadows the two affected global variables, [[help:comint-terminfo-terminal][comint-terminfo-terminal]] and
[[help:explicit-bash-args][explicit-bash-args]], and assigns them their global values. Then, before calling
the original ~shell~ function, we call the setup function, which will modify the
dynamically-bound local variables instead of the global ones.
#+begin_src emacs-lisp :tangle no :noweb-ref native-complete-setup
  (advice-add 'shell
              :around
              (lambda (fun &rest args)
                "Configure `comint-terminfo-terminal' and `explicit-bash-args' so
  that native completions can be provided, but do so inside a local dynamic scope
  to protect system-wide defaults."
                (let ((comint-terminfo-terminal comint-terminfo-terminal)
                      (explicit-bash-args explicit-bash-args))
                  (native-complete-setup-bash)
                  (apply fun args)))
              '((name . setup-native-complete)))
#+end_src

*** Delight
    Ensure that [[https://elpa.gnu.org/packages/delight.html][Delight]] is installed, since it will be used for hiding
    some modelines in ~use-package~ directives.
#+begin_src emacs-lisp :tangle yes
  (use-package delight :ensure t)
#+end_src

*** Evil
    [[https://github.com/emacs-evil/evil][Evil]]

    Ensure that the package is installed and that it is loaded as soon
    as possible.
#+begin_src emacs-lisp :tangle yes
  (use-package evil
    :ensure t
    :demand t
#+end_src
    Then, activate Evil globally.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  :config
  (evil-mode 1)
  <<evil-config>>
#+end_src

**** Initial states

***** Motion
      Motion state is useful to have for its HJKL motion keys without
      shadowing special major mode keys.

      Use the Motion state inside:
      - Tar buffers
        #+begin_src emacs-lisp :tangle yes
          (evil-set-initial-state 'tar-mode 'motion)
        #+end_src
      - IBuffer
        #+begin_src emacs-lisp :tangle yes
          (evil-set-initial-state 'ibuffer-mode 'motion)
        #+end_src
      - Flycheck errors list
        #+begin_src emacs-lisp :tangle yes
          (evil-set-initial-state 'flycheck-error-list-mode 'motion)
        #+end_src
      - [[help:list-processes][Process lists]]
        #+begin_src emacs-lisp :tangle yes
          (evil-set-initial-state 'process-menu-mode 'motion)
        #+end_src

***** Emacs state
      For those modes were even HJKL motion is uncomfortable.

      - [[info:woman#Top][WoMan]]
        #+begin_src emacs-lisp :tangle yes
          (evil-set-initial-state 'woman-mode 'emacs)
        #+end_src
      - XREF buffers
        #+begin_src emacs-lisp :tangle yes
          (evil-set-initial-state 'xref--xref-buffer-mode 'emacs)
        #+end_src

**** Tree undo system
Wire [[*undo-tree][undo-tree]] to the [[help:evil-undo][evil-undo]] function. This way, Evil undo results in and
undo command on the tree, permitting forking histories.

For this, the relevant package and [[help:undo-tree-mode][undo-tree-mode]] needs to be enabled globally
before Evil starts.
#+begin_src emacs-lisp :tangle yes
  :after undo-tree
#+end_src
Then, we need to tell Evil to use this backend (being careful to use the setter
function [[help:evil-set-undo-system][evil-set-undo-system]] and not setting the variable [[help:evil-undo-system][evil-undo-system]]
directly).
#+begin_src emacs-lisp :tangle yes
  :config
  (evil-set-undo-system 'undo-tree)
#+end_src

In addition, the [[help:global-undo-tree-mode][global-undo-tree-mode]] is not effective inside non-file
buffers. Therefore we need to explicitly activate it when the local Evil mode is
activated.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'evil-local-mode-hook 'turn-on-undo-tree-mode))
#+end_src

**** Remapping
     - Evil in Insert state uses =C-p=/=C-n= for its own completion
       mechanism. Unfortunately, this is the same thing done by [[*Company][Company]]. Remove
       the Evil mappings, as the Company byndings are much more valuable.
       #+begin_src emacs-lisp :tangle no :noweb-ref evil-config
         (evil-global-set-key 'insert (kbd "C-p") nil)
         (evil-global-set-key 'insert (kbd "C-n") nil)
       #+end_src

**** Evil extras
     Extra functionalities ported from Vim, enabled globally.
 
***** Surround
      [[https://github.com/emacs-evil/evil-surround][evil-surround]], an Evil port of [[https://github.com/tpope/vim-surround][vim-surround]].
#+begin_src emacs-lisp :tangle yes
  (use-package evil-surround
    :ensure t
    :after evil
    :config (global-evil-surround-mode 1))
#+end_src

***** Matchit
      [[https://github.com/redguardtoo/evil-matchit][evil-matchit]], an Evil porting of [[https://www.vim.org/scripts/script.php?script_id=39][matchit.vim]].
#+begin_src emacs-lisp :tangle yes
  (use-package evil-matchit
    :ensure t
    :after evil
    :config (global-evil-matchit-mode 1))
#+end_src

***** Numbers
      Easy number increment and decrement.
#+begin_src emacs-lisp :tangle yes
  (use-package evil-numbers
    :ensure t
    :after evil
#+end_src
     Bind the increment and decrement functions to ~C-c +/-~.
#+begin_src emacs-lisp :tangle yes
    :bind (("C-c +" . evil-numbers/inc-at-pt)
           ("C-c -" . evil-numbers/dec-at-pt)))
#+end_src

***** evil-org
      [[https://github.com/Somelauw/evil-org-mode][Repo]]

      Activate Vim-like byndings in Org.
#+begin_src emacs-lisp :tangle yes
  (use-package evil-org
    :ensure t
    :after org
    :delight evil-org-mode
    :hook (org-mode . evil-org-mode)
    :config 
#+end_src
      Refer to [[https://github.com/Somelauw/evil-org-mode/blob/master/doc/keythemes.org][the official key tables]] to see what each key theme
      brings to the table.
#+begin_src emacs-lisp :tangle yes
    (evil-org-set-key-theme
     '(navigation insert textobjects additional calendar))
#+end_src

****** Agenda support
       Enable Evil keys in Org's agenda view.
#+begin_src emacs-lisp :tangle yes
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
#+end_src

****** Special beginning/end-of-line commands
       Make commands that go to the beginning or to the end of a line
       ignore leading stars or bullets and trailing tags, respectively.
#+begin_src emacs-lisp :tangle yes
  :custom
  (org-special-ctrl-a/e t))
#+end_src

*** Hydra
    [[https://github.com/abo-abo/hydra][Repo]] [[https://github.com/abo-abo/hydra#the-rules-of-hydra-tics][Syntax]]

    Augment keybindings with visible key guide and easy repetition.
    #+begin_src emacs-lisp :tangle yes
      (use-package hydra
        :ensure t)
    #+end_src

*** undo-tree
Replace the stock undo system with [[https://github.com/apchamberlain/undo-tree.el][undo-tree]], allowing for forking
undo/redo histories.
#+begin_src emacs-lisp :tangle yes :noweb yes
  (use-package undo-tree
    :ensure t
    :demand t
    :delight undo-tree-mode
    :config
    <<ut-additional-conf>>
    (global-undo-tree-mode 1))
#+end_src

**** Region-based undo
Allow undo-tree to manage undos/redos limited to regions.
#+begin_src emacs-lisp :tangle no :noweb-ref ut-additional-conf
  (setq undo-tree-enable-undo-in-region t)
#+end_src

**** Incompatible modes
By default, undo-tree is inactive only in buffers without a backing file and
[[help:term-mode][term-mode]] buffers. We already activated the mode in more buffers than we should
as part of the settings in [[*Tree undo system][the Evil configuration]], so we should add more
incompatible modes to the list. In addition, there are some obviously
incompatible modes that, apparently, haven't been taken into account by the
creator (which is a legitimate thing, given the feature-creep of Emacs).
#+begin_src emacs-lisp :tangle no :noweb-ref ut-additional-conf
  (add-to-list 'undo-tree-incompatible-major-modes
               'image-mode)
  (add-to-list 'undo-tree-incompatible-major-modes
               'archive-mode)
  (add-to-list 'undo-tree-incompatible-major-modes
               'pdf-view-mode)
#+end_src

**** Persistent undo trees
undo-tree now supports persistent undo trees, saved between sessions by
serializing them into specialized files.

***** Persistent trees directory
By default, undo trees are saved beside the original files. Instead, we will use
the same [[*Destination of backup files][policy we established for backup files]] and store them into a
centralized =undo/= directory under the Emacs user directory.
#+begin_src emacs-lisp :tangle no :noweb-ref ut-additional-conf
  (setq undo-tree-history-directory-alist
        `(("." . ,(concat user-emacs-directory
                          (convert-standard-filename "undo/")))))
#+end_src

***** Compression
Transparently compress undo history files using =gzip= (as per [[https://www.dr-qubit.org/undo-tree/undo-tree.txt][undo-tree.txt]]).
#+begin_src emacs-lisp :tangle no :noweb-ref ut-additional-conf
  (defadvice undo-tree-make-history-save-file-name
      (after undo-tree activate)
    (setq ad-return-value (concat ad-return-value ".gz")))
#+end_src

***** Sensitive files
Certain files, like encrypted files opened via [[info:epa#Top][EPA]], contain sensitive
information that should not be persisted into clear-text undo tree
serializations. Therefore, [[*Detecting encrypted files][if the file is encrypted]], deactivate the persistent
undo tree functionality.
#+begin_src emacs-lisp :tangle no :noweb-ref ut-additional-conf
  (defun disable-ut-save-for-encrypted-files ()
    "Disable the `undo-tree-auto-save-history' functionality for encrypted files.

  This function is meant to be run as a hook as part of `undo-tree-mode-hook'."
    (when (encrypted-file-name-p (buffer-name))
      (setq-local undo-tree-auto-save-history nil)))

  (add-hook 'undo-tree-mode-hook #'disable-ut-save-for-encrypted-files)
#+end_src

***** Avoiding unnecessary writes
When persistent undo histories are enabled, undo-tree saves its trees every time
we kill a buffer, irrespective of whether the file was actually changed. What's
worse, due to a side-effect in [[help:undo-tree-save-history][undo-tree-save-history]], unmodified files get an
empty tree that is immediately serialized to disk, needlessly littering the [[*Persistent trees
directory][persistent trees directory]]. In order to circumvent this issue, we
combine two approaches: the first relies on a new buffer-local variable, called
~buffer-undo-tree-hash~, which stores the hash of the undo tree that was loaded
from disk for the current file, or ~nil~ if no file was found; the other simply
checks whether the tree that is about to be saved is empty and, if it is,
forgoes the write.

First, we define the new hash variable and we force it to be buffer-local.
#+begin_src emacs-lisp :tangle no :noweb-ref ut-additional-conf
  (defvar buffer-undo-tree-hash nil
    "Hash of the `buffer-undo-tree' of the current buffer.")
  (put 'buffer-undo-tree-hash 'permanent-local t)
  (make-variable-buffer-local 'buffer-undo-tree-hash)
#+end_src
Then, we define a function that calculates the hash of the persistent tree of
the current buffer. The most straight-forward (but inefficient) way of doing it
is by serializing the tree into a buffer and then hashing its contents.
#+begin_src emacs-lisp :tangle no :noweb-ref ut-additional-conf
  (defun undo-tree-compute-hash ()
    "Calculate the SHA1 hash of the `undo-tree' of the current buffer.

  If the undo tree of the current buffer is nil, then its hash will also be nil.

  If `undo-tree-mode' is disabled, this function returns nil."
    (let ((tree buffer-undo-tree))
      (if (and undo-tree-mode tree (not (eq tree t)))
          (with-temp-buffer
            (undo-tree-serialize tree)
            (sha1 (current-buffer)))
        nil)))
#+end_src
Finally, we wire this function into the loading mechanism by [[info:elisp#Advising Functions][advising]] the
[[help:undo-tree-load-history][undo-tree-load-history]] function. This guarantees that the hash is updated both
when a tree is loaded automatically and when it is loaded on-demand.
#+begin_src emacs-lisp :tangle no :noweb-ref ut-additional-conf
  (advice-add 'undo-tree-load-history
              :after
              (lambda (&rest _args)
                "Set the local variable `buffer-undo-tree-hash' with the result of
  calling `undo-tree-compute-hash'."
                (setq-local buffer-undo-tree-hash (undo-tree-compute-hash)))
              '((name . set-buffer-undo-tree-hash)))
#+end_src

In order to enforce both the hash and size constraints, we gate the
[[help:undo-tree-save-history-from-hook][undo-tree-save-history-from-hook]] function, which is responsible for
automatically saving undo trees. We advise this function instead of the main
[[help:undo-tree-save-history][undo-tree-save-history]] because we are only interested in avoiding the spurious
automatic saves, and not the interactive requests for trees to be saved.
#+begin_src emacs-lisp :tangle no :noweb-ref ut-additional-conf
  (advice-add 'undo-tree-save-history-from-hook
              :before-until
              (lambda (&rest _args)
                "Avoid saving history if this is identical to the one that was
  loaded from file or if it is, otherwise, empty.

  This advice uses the value of `buffer-undo-tree-hash' to check for equality with
  the tree that is to be saved."
                (when (and buffer-file-name
                           (not (eq buffer-undo-tree t))
                           (not (eq buffer-undo-list t)))
                  (progn
                    (undo-list-transfer-to-tree)
                    (or (and (null buffer-undo-tree-hash)
                             (= 0 (undo-tree-size buffer-undo-tree)))
                        (string= buffer-undo-tree-hash
                                 (undo-tree-compute-hash))))))
              '((name . undo-tree-save-if-necessary)))
#+end_src
Unfortunately, we have to duplicate some of the checks performed internally by
the core function, and we also need to invoke the undocumented
~undo-list-transfer-to-tree~ in order to be consistent with the true state of
the undo-redo system. Funnily enough, it is exactly this function that is the
culprit of the spurious writes for unmodified files, as it forces an empty tree
to be created if one is not present, already. Finally, we have to update the
hash of the tree that we just saved, otherwise the spurious writes will reappear
just after the first save.
#+begin_src emacs-lisp :tangle no :noweb-ref ut-additional-conf
  (advice-add 'undo-tree-save-history-from-hook
              :after
              (lambda (&rest _args)
                "Set the local variable `buffer-undo-tree-hash' with the result of
  calling `undo-tree-compute-hash'."
                (setq-local buffer-undo-tree-hash (undo-tree-compute-hash)))
              '((name . set-buffer-undo-tree-hash)))
#+end_src

**** Limits
Since we're storing undo trees semi-permanently, we have to tighten the memory
bounds, otherwise we risk overloading Emacs every time we open a long-lived
file.
#+begin_src emacs-lisp :tangle no :noweb-ref ut-additional-conf
  (setq undo-tree-limit 4000000
        undo-tree-strong-limit 8000000
        undo-tree-outer-limit 12000000)
#+end_src

*** Company
    Register [[http://company-mode.github.io/][Company]], the modular autocompleter, and make it available
    everywhere.
#+begin_src emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :delight company-mode
    :hook (after-init . global-company-mode)
#+end_src

**** Autocompletion responsiveness
     Make autocompletion more responsive by both shortening the minimum prefix
     used for picking completions, and diminishing the delay between last
     keypress and completion popup appearance.
#+begin_src emacs-lisp :tangle yes
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0)
#+end_src

**** Selection wrapping and quick access numbers
     Wrap around when going through the candidates list.
#+begin_src emacs-lisp :tangle yes
  (company-selection-wrap-around t)
#+end_src
     Show quick access numbers on the completion list.
#+begin_src emacs-lisp :tangle yes
  (company-show-numbers t)
#+end_src

**** Disable completion enforcement
     In certain modes, completion is mandated, i.e. a character not
     belonging to any completion cannot be entered. Disable this mode,
     since it's rather annoying.
#+begin_src emacs-lisp :tangle yes
  (company-require-match nil)
#+end_src

**** Autocommit                                                    :DISABLED:
     Autocommit the first completion candidate upon pressing certain
     semantically significative keys: closing parentheses, punctuation
     and string quotes. Plus, don't do it for spaces (as per default,
     while usually is use it to escape from autocompletion).
#+begin_src emacs-lisp :tangle no
  (company-auto-commit nil)
  (company-auto-commit-chars '(41 46 34))
#+end_src

**** Pesky downcasing
     By default, [[help:company-dabbrev][company-dabbrev]] downcases all of its completions. Make
     it stop.
#+begin_src emacs-lisp :tangle yes
  (company-dabbrev-downcase nil)
#+end_src
     In addition, unset [[help:company-dabbrev-ignore-case][company-dabbrev-ignore-case]] from
     'keep-prefix'. With this set, the topmost completion candidates
     could have a different casing than desired, leading to some
     annoying additional editing.
#+begin_src emacs-lisp :tangle yes
  (company-dabbrev-ignore-case nil)
#+end_src

**** Backends list
The default list comes with some potentially annoying backends.

First of all, completions based on tag files make the whole experience a lot
slower inside big repositories, therefore they should be eliminated.

Then, since we're programming with [[*LSP][LSP]], which uses the generic capf, also remove
the Clang backend.
#+begin_src emacs-lisp :tangle yes
  :config
  (setq company-backends
        '(company-bbdb company-semantic company-cmake company-capf company-files
          (company-dabbrev-code company-keywords) company-oddmuse
          company-dabbrev)))
#+end_src

**** Math symbols
     Use [[https://github.com/vspinu/company-math][company-math]] for mathematical symbols and other Unicode characters to
     show up as completion suggestions when typing them in LaTeX =\= notation.
     #+begin_src emacs-lisp :tangle yes :noweb yes
       (use-package company-math
         :after (tex company)
         :config
         (add-to-list 'company-backends
                      <<company-math-backends>>))
     #+end_src
     #+name: company-math-backends
     #+begin_src emacs-lisp :tangle no :exports none
       '(company-math-symbols-unicode company-math-symbols-latex)
     #+end_src

*** YASnippet
    Load [[https://github.com/joaotavora/yasnippet][YASnippet]] and reload all snippets, being careful to make sure
    that the [[*Premade snippets][premade snippets]] are already present and that [[*Company][Company]] is
    loaded (see [[*company-yasnippet backend][company-yasnippet backend]]). Also activate it globally.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package yasnippet
    :ensure t
    :after (yasnippet-snippets company)
    :config
    (yas-reload-all)
    (yas-global-mode)
    <<yas-config>>
    :bind
    <<yas-bind>>)
#+end_src

**** Move to another prefix
     YAS uses the =C-c &= prefix for his things. Since this is already
     used pretty well by [[help:org-mark-ring-goto][org-mark-ring-goto]], remap it to =C-c y=.
#+begin_src emacs-lisp :tangle no :noweb-ref yas-config
  (define-key yas-minor-mode-map (kbd "C-c y") (lookup-key yas-minor-mode-map (kbd "C-c &")))
  (define-key yas-minor-mode-map (kbd "C-c &") nil)
#+end_src

**** Forced expansion
     Use =y= after the prefix to force a YASnippet expansion.
     #+begin_src emacs-lisp :tangle no :noweb-ref yas-bind
       (:map yas-minor-mode-map
             ("C-c y y" . yas-expand))
     #+end_src

**** company-yasnippet backend
     According to [[help:company-yasnippet][its manual page]], company-yasnippet is not the most
     well-behaving backend, since it stops all others from continuing
     its work.

     Due to its universal nature, company-dabbrev behaves in a similar
     way, but never fails to provide completions. That's the reason why
     it is placed at the end of the chain.

     Therefore, in order to make the YASnippet backend available without
     compromising the functionality of all the other backends, people seem to
     take inspiration from this [[https://github.com/syl20bnr/spacemacs/pull/179][Spacemacs pull request]], and pair the YAS backend
     to all other backends through the following keyworded cons cell:
     #+name: company-yas-with-cell
     #+begin_src emacs-lisp :tangle no
       '(:with company-yasnippet)
     #+end_src

     First, we define a well-behaved function that appends the YAS backend to
     any other backend, skipping any group of backends where YAS has already
     been added.
     #+begin_src emacs-lisp :tangle no :noweb-ref yas-config
       (defun tal/yas-append-function (backend)
          "Append the YASnippet backend to a Company backend not already accompanied by it."
          (if (and (listp backend)
                   (member 'company-yasnippet backend))
              backend
            (append
             (if (consp backend)
                 backend
               (list backend)) '(:with company-yasnippet))))
     #+end_src

     Then, perform an initial mapcar over all the already-loaded backends.
     #+begin_src emacs-lisp :tangle no :noweb-ref yas-config
       (setq company-backends (mapcar #'tal/yas-append-function
                               company-backends))
     #+end_src

     Just to be safe, define an early autoload for the function, so that code
     can implicitly require YAS if it is modifying the backend list and needs to
     fix it up with the YAS cons cells.
     #+begin_src emacs-lisp :tangle no :noweb-ref early-autoload
       (autoload
         'tal/yas-append-function
         "yasnippet"
         "Append the YASnippet backend to a Company backend not already accompanied by it."
         nil)
     #+end_src

**** Premade snippets
     Make sure to have [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's snippets]] around.
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet-snippets :ensure t)
#+end_src

***** Helm completion                                              :DISABLED:
      Use the Helm interface to fill in snippets.
 #+begin_src emacs-lisp :tangle no
   (require 'helm)
   (defun shk-yas/helm-prompt (prompt choices &optional display-fn)
       "Use helm to select a snippet. Put this into `yas-prompt-functions.'"
       (interactive)
       (if (require 'helm-config nil t)
           (let ((result (helm-other-buffer
                          (list `((name . ,prompt)
                                  (candidates . ,(if display-fn (mapcar display-fn choices)
                                                   choices))
                                  (action . (("Expand" . identity)))))
                          "*helm-select-yasnippet")))
             (cond ((null results)
                    (signal 'quit "user quit!"))
                   (display-fn
                    (catch 'result
                      (dolist (choice choices)
                        (when (equal (funcall display-fn choice) result)
                          (throw 'result choice)))))
                   (t result)))
         nil))
   (push 'shk-yas/helm-prompt yas-prompt-functions)
 #+end_src

*** The Ivy/Counsel/Swiper stack
    [[https://github.com/abo-abo/swiper][Repo]], [[https://oremacs.com/swiper/][User manual]]

**** Ivy
     Activate Ivy as a generic completion backend.
#+begin_src emacs-lisp :tangle yes
  (use-package ivy
    :ensure t
    :delight ivy-mode
#+end_src
     Activate Ivy everywhere.
#+begin_src emacs-lisp :tangle yes
    :config
    (ivy-mode 1)
    :custom
#+end_src

***** Virtual buffers
      Make it so that recent files and bookmarks end up as completion
      candidates for buffers, skipping explicit opening.
#+begin_src emacs-lisp :tangle yes
    (ivy-use-virtual-buffers t)
#+end_src

***** Completion candidates minibuffer format
      Set the format string for completion candidates counters.
#+begin_src emacs-lisp :tangle yes
  (ivy-count-format "(%d/%d) "))
#+end_src

**** Counsel
     Activate Counsel mode, replacing common Emacs functions and
     commands with their Ivy reimplementations.
#+begin_src emacs-lisp :tangle yes
  (use-package counsel
    :ensure t
    :demand t
    :after ivy
    :delight counsel-mode
    :config
    (counsel-mode 1))
#+end_src

**** Swiper
     Set Swiper as the default Emacs-style search interface, providing
     previews of matched lines.
#+begin_src emacs-lisp :tangle yes
  (use-package swiper
    :ensure t
    :after ivy
    :bind ("C-s" . swiper-isearch))
#+end_src

*** Status line
Use [[https://github.com/dbordak/telephone-line][Telephone Line]] as the status line.
#+begin_src emacs-lisp :tangle yes
  (use-package telephone-line
    :ensure t
    :config
    (telephone-line-mode 1))
#+end_src

*** Drag stuff
    [[https://github.com/rejeep/drag-stuff.el][Repo]]

    Register some handy functions and bindings for dragging textual
    units around.
#+begin_src emacs-lisp :tangle yes
  (use-package drag-stuff
    :ensure t
    :demand t
    :config
    (drag-stuff-global-mode 1)
    (drag-stuff-define-keys)
#+end_src

**** Don't overlap with Org functionalities
     Org already supports dragging outlines around, and this is
     shadowed by drag-stuff. For now, disable it in org-mode.
#+begin_src emacs-lisp :tangle yes
    (add-to-list 'drag-stuff-except-modes 'org-mode))
#+end_src

*** pdf-tools
    Replace DocView with [[https://github.com/politza/pdf-tools][PDF Tools]].
#+begin_src emacs-lisp :tangle yes
  (use-package pdf-tools
    :config
    (pdf-tools-install :no-query :skip-dependencies)
#+end_src
 
**** Activation
     The mode needs to be activated as soon as a PDF file is
     opened. Register the extension for automatic activation.
#+begin_src emacs-lisp :tangle yes
    :magic ("%PDF" . pdf-view-mode))
#+end_src

*** Crosshairs
    [[https://www.emacswiki.org/emacs/CrosshairHighlighting][Wiki page]]

    Highlight line and column where the cursor currently is. It was
    easy to achieve in Vim, but in Emacs the implementation is a
    little weak.
#+begin_src emacs-lisp :tangle yes
  (use-package crosshairs
    :load-path "manual-packages/crosshairs/")
#+end_src

*** Dired+
    [[https://www.emacswiki.org/emacs/DiredPlus][Wiki page]]
#+begin_src emacs-lisp :tangle yes
  (use-package dired+
    :load-path "manual-packages/dired+/"
#+end_src

**** Unhide details
     By default, Dired+ hides details in new Dired buffers. Since I
     want to see everything, unset this variable:
#+begin_src emacs-lisp :tangle yes
  :custom
  (diredp-hide-details-initially-flag nil))
#+end_src

*** dired-du
Interface to =du= via Dired.
#+begin_src emacs-lisp :tangle yes
  (use-package dired-du
    :ensure t)
#+end_src

*** Iedit
    [[https://github.com/victorhge/iedit][Iedit]] allows to edit matched text in parallel.
#+begin_src emacs-lisp :tangle yes
  (use-package iedit :ensure t)
#+end_src

**** Keybinds
     By default, Iedit is activated by =C-;= but, since that key is
     already being used by [[help:;][Evil]] everywhere, we remap it to =C-c ;=.
#+begin_src emacs-lisp :tangle yes
  ;:bind
  ;("C-c ;" . iedit-mode))
#+end_src

**** evil-iedit-state
     [[https://github.com/syl20bnr/evil-iedit-state][Repo]]

     Adds two new Iedit states to [[*Evil][Evil]], for a slick integration.
#+begin_src emacs-lisp :tangle yes
  (use-package evil-iedit-state
    :ensure t
    :after (evil iedit))
#+end_src

*** with-editor
[[https://github.com/magit/with-editor][Repo]]

Make whatever needs an editor use Emacsclient.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package with-editor
    :ensure t
    :config
    <<with-editor-config>>
    :hook
    <<with-editor-hook>>
    )
#+end_src

**** Export editor to all sub-processes
Enable the global [[help:shell-command-with-editor-mode][shell-command-with-editor-mode]] minor mode, making all
sub-processes use the parent Emacs as their editor of choice.
#+begin_src emacs-lisp :tangle no :noweb-ref with-editor-config
  (shell-command-with-editor-mode 1)
#+end_src

**** Hooking into shells
Register Emacsclient as the editor for all sub-shells.
#+begin_src emacs-lisp :tangle no :noweb-ref with-editor-hook
  (shell-mode . with-editor-export-editor)
  (eshell-mode . with-editor-export-editor)
  (term-exec . with-editor-export-editor)
  (vterm-exec . with-editor-export-editor)
#+end_src

** Programming support
   The packages that follow add various features to aid in program
   development.

*** .editorconfig
The [[https://editorconfig.org/][EditorConfig]] standard mandates that, when a compliant editor finds an
`.editorconfig` file in the tree above CWD, it will respect the text formatting
directives expressed therein.

Make Emacs a compliant editor.
#+begin_src emacs-lisp :tangle yes
  (use-package editorconfig
    :ensure t
    :delight
    :config
    (editorconfig-mode 1))
#+end_src

*** .vimrc
    [[https://github.com/mcandre/vimrc-mode][vimrc-mode]]

    For when you really need to edit .vimrc files in Emacs
    #+begin_src emacs-lisp :tangle yes
      (use-package vimrc-mode)
    #+end_src

*** .gitignore
Small major mode for editing .gitignore files.
#+begin_src emacs-lisp :tangle yes
  (use-package gitignore-mode :ensure t)
#+end_src

*** Bazel
    [[https://github.com/bazelbuild/emacs-bazel-mode][Repo]]

    Syntax, formatting and build support for Bazel projects.
    #+begin_src emacs-lisp :tangle yes
      (use-package bazel)
    #+end_src

*** Clojure
This [[https://clojure.org][Clojure]] setup stands on two packages: [[https://github.com/clojure-emacs/clojure-mode][clojure-mode]] for basic language
support and [[https://cider.mx/][CIDER]] as the dynamic development environment.
#+begin_src emacs-lisp :tangle yes
  (use-package clojure-mode
    :hook
    (clojure-mode . hs-minor-mode))
  (use-package cider)
#+end_src

*** company-nixos-options                                            :BROKEN:
    It's broken for some reason.
    #+begin_src emacs-lisp :tangle no
      (add-to-list 'company-backends 'company-nixos-options)
    #+end_src

*** csv-mode
    For consistently editing CSV files.
    #+begin_src emacs-lisp :tangle yes
      (use-package csv-mode
        :ensure t)
    #+end_src

*** Cypher
    Syntax highlighting for Cypher, the query language of Neo4j.
    #+begin_src emacs-lisp :tangle yes
      (use-package cypher-mode)
    #+end_src

*** Direnv
    Make [[https://github.com/direnv/direnv][Direnv]] environments available to Emacs sub-processes via [[https://github.com/wbolster/emacs-direnv][emacs-direnv]].
    #+begin_src emacs-lisp :tangle yes
      (use-package direnv
        :ensure t
        :config
        (direnv-mode)
    #+end_src

**** Non-file buffers
     By default, [[help:direnv-mode][direnv-mode]] only updates the environment when focus is shifted
     between file-backed buffers.

     Make it trigger in some selected non-file buffers opened in particular
     modes by setting [[help:direnv-non-file-modes][direnv-non-file-modes]].
     #+begin_src emacs-lisp :tangle yes
       (add-to-list 'direnv-non-file-modes 'shell-mode)
       (add-to-list 'direnv-non-file-modes 'comint-mode))
     #+end_src

*** Nix

**** nix-mode
[[https://github.com/NixOS/nix-mode][nix-mode]] is a major mode for editing Nix expressions.
#+begin_src emacs-lisp :tangle yes
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

**** nixpkgs-fmt
[[https://github.com/purcell/emacs-nixpkgs-fmt][nixpkgs-fmt.el]] allows us to call [[https://github.com/nix-community/nixpkgs-fmt][nixpkgs-fmt]] on our Nix buffers, giving them a
formatting suitable for submission to the Nixpkgs repo. These formatting rules
are good-enough general guidelines for any Nix expression, so we can enable
automatic formatting upon save for all Nix buffers.
#+begin_src emacs-lisp :tangle yes
  (use-package nixpkgs-fmt
    :commands (nixpkgs-fmt-buffer nixpkgs-fmt-region)
    :hook
    (nix-mode . nixpkgs-fmt-on-save-mode))
#+end_src

*** LSP
Use [[https://joaotavora.github.io/eglot/][Eglot]] as the LSP client for Emacs.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package eglot
    :custom
    <<eglot-var>>
    :config
    <<eglot-conf>>)
#+end_src

**** Connection management
Do not reopen connections automatically to avoid inconveniences with remote
connections (e.g. when you suspend your laptop while connected to the Internet
and resume it on a train).
#+begin_src emacs-lisp :tangle no :noweb-ref eglot-var
  (eglot-autoreconnect nil)
#+end_src
Close connections automatically when all project buffers are gone. Usually, if I
want to continue working on a project in the near future, I leave its buffers
open.
#+begin_src emacs-lisp :tangle no :noweb-ref eglot-var
  (eglot-autoshutdown t)
#+end_src

*** ESS
    Enable [[https://ess.r-project.org][Emacs Speaks Statistics]] for awesome statistical aids that
    i'll never use again.
 #+begin_src emacs-lisp :tangle yes
   (use-package ess
     :init
     (require 'ess-site)
     :commands R
     :mode "\\.Rout\\'")
 #+end_src

*** Graphviz
    [[https://github.com/ppareit/graphviz-dot-mode][Repo]]

    Add some support for editing dot files.
    #+begin_src emacs-lisp :tangle yes
      (use-package graphviz-dot-mode
        :ensure t
        :config
        (setq graphviz-dot-indent-width 4))
    #+end_src

*** Gnuplot
    #+begin_src emacs-lisp :tangle yes
      (use-package gnuplot)
    #+end_src

*** Haskell                                                        :DISABLED:
    Add completion support for Haskell through the [[https://github.com/horellana/company-ghci][company-ghci]]
    [[*Company][Company]] backend.
#+begin_src emacs-lisp :tangle no
  (use-package company-ghci
    :after company
    :config
    (add-to-list 'company-backends 'company-ghci))
#+end_src

*** json-mode
    [[https://github.com/joshwnj/json-mode][json-mode]] gives better syntax highlighting and additional editing
    keybindings, extending the builtin major mode.
 #+begin_src emacs-lisp :tangle yes
   (use-package json-mode
     :ensure t
     :mode (("\\.json\\'" . json-mode)
 #+end_src

**** JSON-LD
     Add JSON-LD to the list of files to be opened in json-mode.
 #+begin_src emacs-lisp :tangle yes
     ("\\.jsonld\\'" . json-mode)))
 #+end_src

*** Treemacs
    [[https://github.com/Alexander-Miller/treemacs][Repo]]
 #+begin_src emacs-lisp :tangle yes
   (use-package treemacs
 #+end_src

**** Keybinds
 #+begin_src emacs-lisp :tangle yes
     :bind 
     ("C-c t" . treemacs))
 #+end_src

**** Integrations
***** Evil
 #+begin_src emacs-lisp :tangle yes
   (use-package treemacs-evil
     :after (treemacs evil))
 #+end_src

***** Projectile
 #+begin_src emacs-lisp :tangle yes
   (use-package treemacs-projectile
     :after (treemacs projectile))
 #+end_src

*** Projectile
    Enable [[https://projectile.mx/][Projectile]] for managing any programming project directory.
 #+begin_src emacs-lisp :tangle yes :noweb no-export
   (use-package projectile
     :hook (prog-mode . projectile-mode)
     :config
     <<projectile-config>>
 #+end_src

**** Manual delighting
     Instead of the extended =Projectile[<project name>]= indicator,
     use a much smaller =Prj[<project name>]=.
#+begin_src emacs-lisp :tangle yes
     :custom
     (projectile-mode-line-prefix "Prj")
#+end_src

***** Why no "automatic" delighting?
      According to some sources online, the same effect could be
      achieved via [[*Delight][Delight]] by providing a replacement string
      dynamically generated by using [[help:projectile-project-name][projectile-project-name]].

      At the end of [[https://docs.projectile.mx/projectile/2.2/configuration.html#mode-line-indicator][this doc page]], though, it is said that Projectile
      will not look for the project name when editing remote files. By
      using that function directly, we always force the project name
      lookup.

      Since I am a heavy TRAMP user, this led to an unusable Emacs.

**** Switch project to root
     When switching to a project, open its root directory in Dired.
#+begin_src emacs-lisp :tangle yes
     (projectile-switch-project-action #'projectile-dired)
#+end_src

**** Caching
Project file caching is enabled [[help:projectile-enable-caching][only for the native indexing method]], but the
default on all OSes except Windows is =alien= (see the [[help:projectile-indexing-method][help page]]). Therefore,
caching must be enabled manually.
#+begin_src emacs-lisp :tangle yes
  (projectile-enable-caching t )
#+end_src

Also set cache TTL for project files to 60 minutes.
#+begin_src emacs-lisp :tangle yes
  (projectile-files-cache-expire (* 60 60))
#+end_src

Another cache is the "file exists cache", which is heavily used when checking
for the existence of project-identifying files (e.g. =.projectile=, =.git=,
...). It is useful to extend the lifetime of this cache for remote projects
(here, up to 1 hour):
#+begin_src emacs-lisp :tangle yes
  (projectile-file-exists-remote-cache-expire (* 60 60))
#+end_src

**** Keymap
     Use =C-c p= as prefix for all [[https://docs.projectile.mx/projectile/usage.html#interactive-commands][commands]].
#+begin_src emacs-lisp :tangle yes
     :bind
     (:map projectile-mode-map
           ("C-c p" . projectile-command-map)))
#+end_src

**** Disable over TRAMP
Projectile continuously checks dominant files for those files that define a
project (e.g. version control directories). This is fine on local directories,
but becomes terrible when remote directories are involved. Disable this check
over remote systems.
#+begin_src emacs-lisp :tangle yes
  (defun currently-remote (&rest a)
    (file-remote-p default-directory))
#+end_src
#+begin_src emacs-lisp :tangle no :noweb-ref projectile-config
  (advice-add 'projectile-project-root :before-until #'currently-remote)
#+end_src

*** Colored parentheses
When editing heavily parenthesized code, it is useful to have matching
parentheses be colored differently.
#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :ensure t
    :hook (lisp-mode clojure-mode))
#+end_src

*** Rust
Loosely based on [[https://robert.kra.hn/posts/rust-emacs-setup/][Robert Krahn's setup]].

**** Rustic
[[https://github.com/brotzeit/rustic][Rustic]] is a replacement for [[https://github.com/rust-lang/rust-mode][rust-mode]], which adds some additional features.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package rustic
    :custom
    <<rustic-custom>>)
#+end_src

***** Format on save
Always run =rustfmt= before saving.
#+begin_src emacs-lisp :tangle no :noweb-ref rustic-custom
  (rustic-format-trigger 'on-save)
#+end_src

**** DAP
Register a debug template for Rust.
#+begin_src emacs-lisp :tangle no :noweb-ref dap-template
  (dap-register-debug-template
   "Rust::LLDB Run Configuration"
   (list :type "lldb"
         :request "launch"
         :name "LLDB::Run"
         :gdbpath "rust-lldb"
         :target nil
         :cwd nil))
#+end_src

*** Scala
    Use [[https://github.com/hvesalai/emacs-scala-mode][scala-mode]] for basic language support.
#+begin_src emacs-lisp :tangle yes
  (use-package scala-mode
    :interpreter
    ("scala" . scala-mode))
#+end_src

**** SBT
     Interface with the [[https://www.scala-sbt.org/][SBT]] interactive Scala build tool through
     [[https://github.com/hvesalai/emacs-sbt-mode][sbt-mode]], allowing for SBT commands to be run from inside Emacs.
#+begin_src emacs-lisp :tangle yes
  (use-package sbt-mode
    :after scala-mode
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map)
    ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
    (setq sbt:program-options '("-Dsbt.supershell=false")))
#+end_src

*** ttl-mode
    Syntax highlighting and electric indent for Turtle files.
#+begin_src emacs-lisp :tangle yes
  (use-package ttl-mode
    :load-path "manual-packages/ttl-mode/"
    :mode "\\.\\(n3\\|ttl\\|trig\\)\\'"
    :config
    (add-hook 'ttl-mode-hook 'turn-on-font-lock)
#+end_src

**** Idle indent
     For some reason, this mode has an annoying automatic indentation
     functionality that fires after some idle time. Disable it.
     #+begin_src emacs-lisp :tangle yes
       :custom (ttl-indent-on-idle-timer nil))
     #+end_src

*** paredit
Parentheses-based structural editing.
#+begin_src emacs-lisp :tangle yes
  (use-package paredit
    :ensure t
    :hook (lisp-mode clojure-mode))
#+end_src

*** Magit
    [[https://magit.vc/][Homepage]]
    [[https://magit.vc/manual/magit.html][User manual]]
    [[https://magit.vc/manual/magit-refcard.pdf][Reference card]]
    #+begin_src emacs-lisp :tangle yes
      (use-package magit
        :ensure t)
    #+end_src

*** guess-style                                                    :DISABLED:
    [[https://github.com/nschum/guess-style][Repo]]

    Guess indentation style when explicitly invoked.
    #+begin_src emacs-lisp :tangle no
      (use-package guess-style
        :load-path "manual-packages/guess-style/"
        :commands
        guess-style-set-variable
        guess-style-guess-variable
        guess-style-guess-all)
    #+end_src

** Writing and publishing
   What follow are packages centered around writing documents. Among
   other things, here are the packages for managing bibliographies for
   technical publications.

*** TeX

**** AUCTeX
     [[https://www.gnu.org/software/auctex/][GNU documentation]]
     #+begin_src emacs-lisp :tangle yes
       (use-package tex
         :ensure auctex
         :custom
     #+end_src
***** Style autosave and parsing
      I don't really get this, but somehow it should be here.
      #+begin_src emacs-lisp :tangle yes
          (TeX-auto-save t)
          (TeX-parse-self t)
      #+end_src
***** auto-fill mode
      Enable auto-fill-mode in TeX buffers, so that the resulting
      document looks cleaner.
      #+begin_src emacs-lisp :tangle yes
         :config
         (add-hook 'TeX-mode-hook 'auto-fill-mode))
      #+end_src

**** RefTeX
     [[https://www.gnu.org/software/emacs/manual/html_mono/reftex.html][Online manual]]

     #+begin_src emacs-lisp :tangle yes :noweb no-export
       (with-eval-after-load 'tex
         (require 'reftex)
         <<rftx-conf>>)
     #+end_src

***** Auto-activation
      Auto-activate RefTeX inside all [[*AUCTeX][LaTeX mode]] buffers.
      #+begin_src emacs-lisp :tangle no :noweb-ref rftx-conf
        (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
      #+end_src

***** AUCTeX integration
      Activate the [[info:reftex#AUCTeX-RefTeX Interface][AUCTeX-RefTeX Interface]] and allow RefTeX to complete:
      - labels (flag 2)
      - refs (flag 3)
      - index stuff (flag 5)
      #+begin_src emacs-lisp :tangle no :noweb-ref rftx-conf
        (setq reftex-plug-into-AUCTeX
              '(nil t t nil t))
      #+end_src

      Other supports are disabled because:
      - new labels (flag 1): I don't want RefTeX to auto-insert labels (I want to
        craft my own)
      - supply arguments to ~\cite~ (flag 4): I use [[*helm-bibtex][helm-bibtex]]

**** Company integration
     Add some specialized backends to [[help:company-backends][company-backends]] when inside LaTeX
     documents. First, the necessary packages are described, then the hooking
     code is explained.

***** Generic autocompletion
      [[https://github.com/alexeyr/company-auctex/][Company-AUCTeX]], a Company backend for AUCTeX.
      #+begin_src emacs-lisp :tangle yes
        (use-package company-auctex
          :after (tex company))
      #+end_src

      The built-in [[help:company-auctex-init][company-auctex-init]] adds some backends superseded by the
      [[*RefTeX-specific backends][RefTeX-specific backends]], therefore we will only use:
      #+begin_src emacs-lisp :tangle no :noweb-ref latex-company-backends
        '(company-auctex-macros company-auctex-symbols company-auctex-environments)
      #+end_src

***** RefTeX-specific backends
      [[https://github.com/TheBB/company-reftex][company-reftex]] provides completion services for labels and citations.
      #+begin_src emacs-lisp :tangle yes
        (use-package company-reftex
          :after (tex reftex company))
      #+end_src

      These are its backends:
      #+begin_src emacs-lisp :tangle no :noweb-ref latex-company-backends
         '(company-reftex-labels company-reftex-citations)
      #+end_src

***** Hooking into LaTeX buffers
      LaTeX backends should be:
      - activated only inside LaTeX buffers
      - grouped together

      In addition, the [[*Math symbols][backends for math symbols]] should also be grouped in a
      special way, as mentioned in [[https://www.emacswiki.org/emacs/company-math#h5o-3][this Emacs Wiki page]]. Therefore, the
      resulting grouped backends look like this:
      #+name: latex-company-backends-group
      #+begin_src emacs-lisp :tangle no :noweb no-export
        (append
         <<company-math-backends>>
         <<latex-company-backends>>)
      #+end_src

      But first, remember that the math backends are already part of the global
      list (with the appended [[*company-yasnippet backend][company-yasnippet backend]]), so produce a copy of
      this without such backends:
      #+name: company-backends-nomath
      #+begin_src emacs-lisp :tangle no :noweb no-export
        (remove
         (tal/yas-append-function <<company-math-backends>>)
         company-backends)
      #+end_src

      Finally, use a lambda to hook the backend list-generating code, including
      a call to [[help:tal/yas-append-function][tal/yas-append-function]] in order to make LaTeX snippets
      available:
      #+begin_src emacs-lisp :tangle yes :noweb no-export
        (add-hook 'LaTeX-mode-hook
                  (lambda nil
                    (setq-local company-backends
                                (cons
                                 (tal/yas-append-function
                                  <<latex-company-backends-group>>)
                                 <<company-backends-nomath>>))))
      #+end_src

*** AsciiDoc
    Add support for writing AsciiDoc documentation.
    #+begin_src emacs-lisp :tangle yes
      (use-package adoc-mode)
    #+end_src

*** EIN
[[https://github.com/millejoh/emacs-ipython-notebook][Repo]]

Add support for Jupyter notebooks. This allows to read, edit and run notebooks
inside an elaborated textual interface.
#+begin_src emacs-lisp :tangle yes
  (use-package ein)
#+end_src

*** org-ref
    [[https://github.com/jkitchin/org-ref][Github page]]
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package org-ref
    :after (org reftex bibtex-completion)
    :custom
    <<org-ref-custom>>
    :config
    <<org-ref-config>>)
#+end_src

**** Bibliography
Set the location of the default bib database.
#+begin_src emacs-lisp :tangle no :noweb-ref org-ref-custom
  (bibtex-completion-bibliography "~/org/bibliography/references.bib")
#+end_src

**** PDF library
Set path to the PDF library. Use the Org machinery to open PDF files with the
correct viewer.
#+begin_src emacs-lisp :tangle no :noweb-ref org-ref-custom
  (bibtex-completion-library-path "~/org/bibliography/pdfs")
  (bibtex-completion-pdf-open-function 'org-open-file)
#+end_src

**** Reftex
Set default bibliography for RefTeX to the bibliography used by
org-ref.
#+begin_src emacs-lisp :tangle no :noweb-ref org-ref-custom
  (reftex-default-bibliography "~/org/bibliography/references.bib")
#+end_src

**** Submodules
Load additional libraries that org-ref provides.

***** helm-bibtex
Use the advanced menu of [[*helm-bibtex][helm-bibtex]] with the org-ref bibliography.
#+begin_src emacs-lisp :tangle no :noweb-ref org-ref-config
  (require 'org-ref-helm)
#+end_src

***** doi-utils
Allow for retrieval of bibliography info and PDFs via DOIs.
#+begin_src emacs-lisp :tangle no :noweb-ref org-ref-config
    (require 'doi-utils)
#+end_src

***** org-ref-arxiv
Add entries from [[http://arxiv.org][arxiv.org]] links.
#+begin_src emacs-lisp :tangle no :noweb-ref org-ref-config
    (require 'org-ref-arxiv)
#+end_src

***** org-ref-sci-id
Define new link schemes for [[http://www.orcid.org][ORCID]] and [[https://www.researcherid.com][ResearcherID]] URIs.
#+begin_src emacs-lisp :tangle no :noweb-ref org-ref-config
  (require 'org-ref-sci-id)
#+end_src

*** helm-bibtex
    [[https://github.com/tmalsburg/helm-bibtex][Repo]]

    Use [[*Helm][Helm]] as the completion frontend for bibliography.
#+begin_src emacs-lisp :tangle yes
  (use-package helm-bibtex :after helm)
#+end_src

*** PlantUML
[[https://github.com/skuro/plantuml-mode][Repo]] [[help:plantuml-mode][Manual page]]

A major mode for editing PlantUML sources.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package plantuml-mode
    :ensure t
    :custom
    <<plantuml-custom>>)
#+end_src

**** Execution mode
plantuml-mode can compile UML diagrams either via a locally-installed JAR (for
the default path, see [[help:plantuml-jar-path][plantuml-jar-path]]), the [[plantuml.org][official remote server]] or a
locally-installed ~plantuml~ binary.

By default, it goes straight to the webservice. Force it to use the
locally-installed binary, instead.
#+begin_src emacs-lisp :tangle no :noweb-ref plantuml-custom
  (plantuml-default-exec-mode 'executable)
#+end_src

**** Org Babel integration
Register PlantUML as a usable language inside Org source blocks.
#+begin_src emacs-lisp :tangle no :noweb-ref babel-language
  (plantuml . t)
#+end_src

Unfortunately, Babel doesn't respect the value of [[help:plantuml-default-exec-mode][plantuml-default-exec-mode]]
that [[*Execution mode][we set earlier]], but instead requires setting [[help:org-plantuml-exec-mode][its own variable]] to
~'plantuml~ in order to use the executable.
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'ob-plantuml
    (setq org-plantuml-exec-mode 'plantuml))
#+end_src

**** Flycheck
[[https://github.com/alexmurray/flycheck-plantuml][Repo]]

Teach Flycheck how to validate PlantUML buffers.
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck-plantuml
    :ensure t
    :after flycheck
    :config
    (flycheck-plantuml-setup))
#+end_src

*** Roam
    [[https://www.orgroam.com/manual.html][Manual]]

#+begin_src emacs-lisp :tangle yes
  (use-package org-roam
    :ensure t
    :after org
#+end_src
    Load org-roam right after initialization, making it globally
    available in any buffer.
#+begin_src emacs-lisp :tangle yes
  :hook
  (after-init . org-roam-db-autosync-enable)
#+end_src

**** Roam directory
     All Roam notes will be stored under =org/roam=.
#+begin_src emacs-lisp :tangle yes
  :custom
  (org-roam-directory "~/org/roam")
#+end_src

**** Key mappings
     - =C-c o= to enter the interactive selection/creation of a new
       Roam note to write.
     - =C-c i= to insert a Roam link at point with interactive
       selection.
     - =C-c m= to toggle the Roam backlinks buffer.
#+begin_src emacs-lisp :tangle yes
  :bind (("C-c o" . org-roam-node-find)
         ("C-c i" . org-roam-node-insert)
         ("C-c m" . org-roam-buffer-toggle))
#+end_src

**** Roam protocol
     Load and enable the [[https://www.orgroam.com/manual.html#Roam-Protocol][Roam protocols]].
#+begin_src emacs-lisp :tangle yes
  :config
  (require 'org-roam-protocol)
#+end_src

**** Node title template
When displaying the titles of nodes, also include some of the Org tags applied
to them (as suggested in the [[info:org-roam#Customizing Node Completions][info pages]].
#+begin_src emacs-lisp :tangle yes
  (setq org-roam-node-display-template
        (concat "${title:*} "
                (propertize "${tags:10}" 'face 'org-tag)))
#+end_src

**** Templates
     Append the following custom capture templates.

     For some reason, the temporary buffer thing doesn't work.
#+begin_src emacs-lisp :tangle yes
  ;;  :config
  ;;  (push
  ;;   '("p" "paper" plain #'org-roam-capture--get-point "%?"
  ;;     :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}
  ;;#+roam_refs: %(with-temp-buffer (org-ref-insert-link nil) (buffer-string))
  ;;#+filetags: paper
  ;;")
  ;;   :unnarrowed t)
  ;;   org-roam-capture-templates)
  )
#+end_src

*** Org Roam BibTeX
    [[https://github.com/org-roam/org-roam-bibtex/blob/master/doc/orb-manual.org][Manual]]

    Take notes about papers and store them into the hyperlinked Roam stash.
    #+begin_src emacs-lisp :tangle yes
      (use-package org-roam-bibtex
        :ensure t
        :after (org-roam org-ref)
        :delight org-roam-bibtex-mode
        :config
        (org-roam-bibtex-mode))
    #+end_src

** Email support

*** BBDB
    - [[http://bbdb.sourceforge.net/bbdb.html][Online manual]]
    - [[https://blog.petitepomme.net/post/28547901478/installing-and-configuring-bbdb-3][An helpful blog post about configuring BBDB3]]

    Activate and make available BBDB inside the =message= and Gnus interfaces.
    #+begin_src emacs-lisp :tangle yes
      (use-package bbdb
        :ensure t
        :config
        (bbdb-initialize 'message 'gnus)
    #+end_src

**** MUA integration
     Enable auto-update functionalities with the =:/;= keys when
     reading messages, so that we can edit and insert new records
     on-the-fly.

     This step is necessary because, according to the [[help:bbdb-mua-auto-update-init][info page]], this
     funciton has been separated from ~bbdb-initialize~ as to allow
     users to enable this functionality only in certain cases
     (e.g. only for outgoing messages).
     #+begin_src emacs-lisp :tangle yes
         (bbdb-mua-auto-update-init 'message 'gnus)
     #+end_src

     By default, when you press the =:/;= keys without a prefix, a
     simple search in the database is performed. Only when called with
     a prefix do they prompt the user for record creation.

     Let's change the default so that the display/edit functions
     prompt for creation when records are not found. Plus, when called
     with a prefix, try to update name and mail.
     #+begin_src emacs-lisp :tangle yes
       (setq bbdb-mua-interactive-action '(query . update))
     #+end_src

     Finally, make BBDB look at all addresses contained in a message.
     #+begin_src emacs-lisp :tangle yes
       (setq bbdb-message-all-addresses t)
     #+end_src

**** Popups
     Make the popups smaller when opening and editing entries inside
     the mail client.
     #+begin_src emacs-lisp :tangle yes
       (setq bbdb-pop-up-window-size 0.15)
       (setq bbdb-mua-pop-up-window-size 0.15))
     #+end_src

**** Counsel integration
     Install and enable the [[*Counsel][Counsel]] integration.
     #+begin_src emacs-lisp :tangle yes
       (use-package counsel-bbdb
         :ensure t)
     #+end_src

*** dianyou
    #+begin_src emacs-lisp :tangle yes
      (use-package dianyou
        :ensure t)
    #+end_src

** Others

*** Elpher
    [[gopher://thelambdalab.xyz/1/projects/elpher/][Homepage]]

    I wanted to explore the alternative Internet of Gopher and Gemini. That kind
    of Internet is littered with plaintext. Emacs is good at
    plaintext. Therefore, Gopher/Gemini browser in Emacs.
    #+begin_src emacs-lisp :tangle yes
      (use-package elpher)
    #+end_src

*** Maxima
    There is a little unfortunate situation regarding Maxima support in
    Emacs. Currently, there are two =maxima.el= (and =maxima-font-lock.el=) in
    the wild: one is distributed with Maxima, the [[https://gitlab.com/sasanidas/maxima/-/tree/master][other]] is maintained by a
    certain [[https://sasanidas.gitlab.io/f-site/][Fermin Munoz]] and available on Melpa.

    The module in Melpa is much more maintained and up to date, it seems, plus
    has some nice integrations with modern Emacs tools. Therefore, I went for
    that (due to how my OS works, I had to patch the build procedure of Maxima
    so that those old modules don't end up in my =site-lisp=).

**** The main package
     #+begin_src emacs-lisp :tangle yes
       (use-package maxima
     #+end_src

     Follow the configuration displayed on the README.
     First, prime the hooks with the [[help:maxima-hook-function][maxima-hook-function]] and the
     [[help:maxima-font-lock-setup][maxima-font-lock-setup]].
     #+begin_src emacs-lisp :tangle yes
       :init
       (add-hook 'maxima-mode-hook #'maxima-hook-function)
       (add-hook 'maxima-inferior-mode-hook #'maxima-hook-function)
     #+end_src

     Then, register the autoload for editing =.mac= files and for the
     interpreter interaction windows.
     #+begin_src emacs-lisp :tangle yes
       :mode ("\\.mac\\'" . maxima-mode)
       :interpreter ("maxima" . maxima-mode))
     #+end_src

**** Other support packages
     Load the rest of the packages that come bundled with the Maxima CAS,
     [[https://sites.google.com/site/imaximaimath/Home][imaxima and imath]], since they're not conflicting with Melpa packages.

***** Imaxima                                                        :BROKEN:
      Load it and make it so that, when we open it, the buffer is in Maxima
      mode.
      #+begin_src emacs-lisp :tangle yes
        (use-package imaxima
          :custom
          (imaxima-use-maxima-mode-flag t))
      #+end_src

***** Imath
      Load Imath and that's it.
      #+begin_src emacs-lisp :tangle yes
        (use-package imath)
      #+end_src

**** Integrations

***** Company
      Load and activate an ensemble of completion backends for Company.
      #+begin_src emacs-lisp :tangle yes
        (use-package company-maxima
          :after company
          :config
          (add-to-list 'company-backends
                       '(company-maxima-symbols company-maxima-libraries)))
      #+end_src

*** Ement
A Matrix client.
#+begin_src emacs-lisp :tangle yes
  (use-package ement)
#+end_src

*** Mentor
[[https://github.com/skangas/mentor][Repo]]

An interface to rTorrent.
#+begin_src emacs-lisp :tangle yes
  (use-package mentor)
#+end_src

*** trashed
[[https://github.com/shingo256/trashed][Repo]]

A trashcan manager fro Emacs.
#+begin_src emacs-lisp :tangle yes
  (use-package trashed
    :ensure t)
#+end_src

* Emacs options
  What follow are all the configuration options for core
  Emacs. Anything that is not package-related is configured here.

** Editing
   Settings contained in this section are concerned with basic text
   editing facilities, like how to interpret tabs, when to display
   line numbers, etc.

*** Tabs
    Always insert spaces instead of tabs, unless told otherwise.
#+begin_src emacs-lisp :tangle yes
  (setq-default indent-tabs-mode nil)
#+end_src
   Set tab width to be equivalent to 4 spaces.
#+begin_src emacs-lisp :tangle yes
  (setq c-basic-offset 4)
  (setq tab-width 4)
#+end_src

**** Smart tabs
[[https://www.emacswiki.org/emacs/SmartTabs][Wiki article]]

Use tabs for indentation and spaces for alignment in supported modes.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package smart-tabs-mode
    :ensure t
    :hook
    <<tabs-on-hook>>
    :config
    <<smtb-config>>)
#+end_src

***** Auto-activation
smart-tabs-mode only works when ~indent-tabs-mode~ is non-~nil~. Since we
disabled tabs globally, these must be selectively reactivated wherever smart
tabbing is supported (i.e., wherever it has been insinuated):
#+begin_src emacs-lisp :tangle no :noweb-ref smtb-config
  (smart-tabs-insinuate 'c)
#+end_src

The function that activates tabs is [[*Activate tabs for indentation][very simple]], and we can register it with the
hooks for the selected modes:
#+begin_src emacs-lisp :tangle no :noweb-ref tabs-on-hook
  (c-mode-common . tal/tabs-on)
#+end_src

*** Parentheses
    Always show matching parentheses
#+begin_src emacs-lisp :tangle yes
  (show-paren-mode 1)
#+end_src

*** Line numbers
    Display line numbers every time Emacs drops into a programming
    major mode.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

*** Fill and autofill

**** Autofill in Text mode
     When entering text mode, always enable autofilling.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'text-mode-hook 'auto-fill-mode)
#+end_src

** Spell-checking
Enable Flyspell for both textual and programming modes.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src

** Enable disabled functionalities
   This section contains directives that explicitly enable some
   commands that come disabled with stock Emacs installations.
   - Uppercase region
     #+begin_src emacs-lisp :tangle yes
       (put 'upcase-region 'disabled nil)
       (put 'downcase-region 'disabled nil)
     #+end_src
   - Narrowing
     #+begin_src emacs-lisp :tangle yes
       (put 'narrow-to-region 'disabled nil)
       (put 'narrow-to-page 'disabled nil)
     #+end_src

** EasyPG
   Set pinentry mode to "loopback", so that the passphrase is read
   from the minibuffer.
#+begin_src emacs-lisp :tangle yes
  (setq epg-pinentry-mode 'loopback)
#+end_src

** GUI

*** Transparency
Since Emacs 29, we can have transparent frames. Enable it by default for all
created frames.
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'default-frame-alist '(alpha-background . 75))
#+end_src

*** Hide toolbar
Takes too much space and I never use it.
#+begin_src emacs-lisp :tangle yes
  (tool-bar-mode -1)
#+end_src

** Dired

*** ls switches
Add switches to the default ~ls~ invocation.
#+begin_src emacs-lisp :tangle yes
  (setq dired-listing-switches
        (concat dired-listing-switches
                "h"))
#+end_src

*** Incremental search for filenames
When point is on the filename field, incremental search (=C-s=) only looks
through file names. If, instead, point is on any other field, perform an
incremental search among all fields.
#+begin_src emacs-lisp :tangle yes
  (setq dired-isearch-filenames 'dwim)
#+end_src

*** Auto revert
    Automatically revert Dired buffers if directory changes have been
    detected.
    #+begin_src emacs-lisp :tangle yes
      (setq dired-auto-revert-buffer 'dired-directory-changed-p)
    #+end_src

*** WDired

**** Activation key
     Bind =C-c w= to [[help:wdired-change-to-wdired-mode][wdired-change-to-wdired-mode]].
     #+begin_src emacs-lisp :tangle yes
       (define-key dired-mode-map (kbd "C-c w") 'wdired-change-to-wdired-mode)
     #+end_src

**** Permissions
     Allow Dired to change permission bits whenever possible.
     #+begin_src emacs-lisp :tangle yes
       (setq wdired-allow-to-change-permissions t)
     #+end_src

** Ibuffer
   Use [[help:ibuffer-mode][ibuffer-mode]] when listing currently open buffers.
   #+begin_src emacs-lisp :tangle yes
     (global-set-key (kbd "C-x C-b") 'ibuffer)
   #+end_src

** Mouse support
   Since I mainly use Emacs from inside graphical terminal emulators,
   enable XTerm mouse interaction mode.
   #+begin_src emacs-lisp :tangle yes
     (xterm-mouse-mode 1)
   #+end_src

** Built-in language support

*** C
    Enable folding of 'ifdefs' and code blocks.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'c-mode-hook 'hide-ifdef-mode)
  (add-hook 'c-mode-hook 'hs-minor-mode)
#+end_src

*** Python
    Set the default Python interpreter to be Python 3. Because noone
    wants to be legacy.
#+begin_src emacs-lisp :tangle yes
  (setq python-shell-interpreter "python3")
#+end_src

** Backups
   These settings control how Emacs handles backup files: when to
   create them, where to store them and when to delete them.
*** Backup strategy
    Tell Emacs to perform backups by copying files.
#+begin_src emacs-lisp :tangle yes
  (setq backup-by-copying t)
#+end_src
    Store version information in the filenames.
#+begin_src emacs-lisp :tangle yes
  (setq version-control t)
#+end_src
    And make backups of even version-controlled files.
#+begin_src emacs-lisp :tangle yes
  (setq vc-make-backup-files t)
#+end_src

*** Cleanup policy
    Tell Emacs to:
    - keep the two newest revisions of all files;
    - keep the two oldest revisions of all files;
    - silently delete any other revision.
#+begin_src emacs-lisp :tangle yes
  (setq delete-old-versions t
        kept-new-versions 2
        kept-old-versions 2
   )
#+end_src

*** Destination of backup files
    Make Emacs accumulate all backups under a central directory.
#+begin_src emacs-lisp :tangle yes
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory
                          (convert-standard-filename "backups/"))))
   )
#+end_src

*** Safeguards
    Force Emacs to make a backup every time a file is saved. The
    backed-up content is the one being overwritten.
#+begin_src emacs-lisp :tangle yes
  (defun force-buffer-backup ()
    (setq buffer-backed-up nil)
   )
  (add-hook 'before-save-hook 'force-buffer-backup)
#+end_src

** Auto-save
   Decrease the frequency of auto-saves both in terms of input events
   and time (I am frequently editing remotely on an unstable
   connection).
#+begin_src emacs-lisp :tangle yes
  (setq auto-save-interval 500)
  (setq auto-save-timeout 60)
#+end_src

** Auto-revert
   Enable [[help:auto-revert-mode][auto-revert-mode]] on remote files.
   #+begin_src emacs-lisp :tangle yes
     (setq auto-revert-remote-files t)
   #+end_src

** Man
Make auto-completion available to [[help:man][man]], like they are available for [[help:woman][woman]].
#+begin_src emacs-lisp :tangle yes
  (defadvice man (before man-autocomplete activate)
    (interactive (progn
                   (require 'woman)
                   (list (woman-file-name nil)))))
#+end_src

** Org
   Everything Org.

*** General settings
**** File associations
     Make Org archive files also explorable via Org.
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.org_archive\\'" . org-mode))
#+end_src

**** Invisibe edits
     Whenever an edit is made to an hidden part of an Org file:
     - insert text only in parts before visible text
     - delete only visibe text
     - show the edited point
#+begin_src emacs-lisp :tangle yes
  (setq org-fold-catch-invisible-edits 'smart)
#+end_src

**** Line splitting policy
     When pressing =M-RET=, by default it splits the current line and
     creates a new headline/entry with the rest. I want to disable
     this behaviour specifically for headlines.
#+begin_src emacs-lisp :tangle yes
  (setq org-M-RET-may-split-line
        '((headline . nil)
          (default . t)))
#+end_src

*** Agenda

**** Layout
Restore the frame layout after quitting from the agenda.
#+begin_src emacs-lisp :tangle yes
  (setq org-agenda-restore-windows-after-quit t)
#+end_src

**** Files
#+begin_src emacs-lisp :tangle yes
  (setq org-agenda-files '("~/org/scheduler/inbox.org"
                           "~/org/scheduler/work.org"
                           "~/org/scheduler/calendar.org"))
#+end_src

*** Babel
    Enable evaluation of additional languages by loading the appropriate modules
    (refer to the basic table in [[info:org#Languages][the Info page]] and the extended tables on the
    [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][website]]).
    #+begin_src emacs-lisp :tangle yes :noweb no-export
      (org-babel-do-load-languages
       'org-babel-load-languages
       '(
         <<babel-language>>
    #+end_src
    - Graphviz's Dot
      #+begin_src emacs-lisp :tangle yes
          (dot . t)
      #+end_src
    - Emacs Lisp (default)
      #+begin_src emacs-lisp :tangle yes
          (emacs-lisp . t)
      #+end_src
    - GNU Octave
      #+begin_src emacs-lisp :tangle yes
          (octave . t)
      #+end_src
    - Gnuplot
      #+begin_src emacs-lisp :tangle yes
          (gnuplot . t)
      #+end_src
    - LaTeX
      #+begin_src emacs-lisp :tangle yes
          (latex . t)
      #+end_src
    - Maxima
      #+begin_src emacs-lisp :tangle yes
          (maxima . t)
      #+end_src
    - Python
      #+begin_src emacs-lisp :tangle yes
          (python . t)
      #+end_src
    - Shell
      #+begin_src emacs-lisp :tangle yes
          (shell . t)))
      #+end_src

**** GNU Screen
[[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-screen.html][Screen interaction]] through Babel is... funny, as it uses a full-blown terminal
emulator and interacts with it.
#+begin_src emacs-lisp :tangle no :noweb-ref babel-language
  (screen . t)
#+end_src

Since I don't use Xterm but [[https://codeberg.org/dnkl/foot][Foot]], we must customize the default header arguments
for this type of source blocks, so that it uses this terminal emulator. While at
it, let's also set the shell to Bash.
#+begin_src emacs-lisp :tangle yes
  (setq org-babel-default-header-args:screen
        '((:results . "silent")
          (:session . "default")
          (:cmd . "bash")
          (:terminal . "foot")
          (:screenrc . "/dev/null")))
#+end_src

*** Capture

**** Templates
#+begin_src emacs-lisp :tangle yes :noweb no-export :noweb-prefix no
  (setq org-capture-templates '(<<org-capture-template>>))
#+end_src

***** Unprocessed agenda items
Capture raw thoughts, events and stuff to do and put it in the inbox.
#+begin_src emacs-lisp :tangle no :noweb-ref org-capture-template
  ("i" "Put raw item into inbox" entry
        (file+headline "scheduler/inbox.org" "Capture")
        "* %^{Item}\nAdded: %U\n%?")
#+end_src

***** Actionable task
Atomic task destined for the main work list.
#+begin_src emacs-lisp :tangle no :noweb-ref org-capture-template
  ("t" "Task entry" entry
        (file+headline "scheduler/work.org" "Actions")
        "* TODO %^{Brief description} %^g\nAdded: %U%?")
#+end_src

***** Appointments
Events for which some action is necessary (e.g., participation).
#+begin_src emacs-lisp :tangle no :noweb-ref org-capture-template
  ("a" "Appointment" entry
        (file+headline "scheduler/calendar.org" "Appointments")
        "* SCHED %^{Title} %^g\n%^T%?")
#+end_src

*** Entities

**** Entity preview
     By default, activate UTF8 entity rendering in all Org buffers (consult the
     output of ~org-entities-help~ for a list of recognized entities).
     #+begin_src emacs-lisp :tangle yes
       (setq org-pretty-entities t)
     #+end_src

**** Subscripts and superscripts
     Sometimes, you want to put an underscore/caret in plaintext just because,
     but Org interprets it as an entity and tries to pretty-print your text by
     putting the text that follows are subscript/superscript (or simply makes it
     disappear, when inside a terminal).

     Make it so that braces are required in order to recognize such entities.
     #+begin_src emacs-lisp :tangle yes
       (setq org-use-sub-superscripts '{})
     #+end_src

*** Exporting

**** Markdown
Enable exporting to Markdown files.
#+begin_src emacs-lisp :tangle yes
  (require 'ox-md)
#+end_src

*** Footnotes
Automatically renumber and sort footnotes to maintain some consistency between
numeric labels and the order in which they appear.
#+begin_src emacs-lisp :tangle yes
  (setq org-footnote-auto-adjust t)
#+end_src

*** Images
When displaying images in-line, resize them to fit within 60% of the
(approximate) maximum width that text occupies. If no size has been specified
for text, default to 10 pixels.
#+begin_src emacs-lisp :tangle yes
  (setq org-image-actual-width
        (* (round (* fill-column 0.6))
           (or (font-get (face-attribute 'default :font t) :size)
               10))
#+end_src

*** Key binds
**** org-capture
     Bind =C-c r= to quickly capture stuff.
#+begin_src emacs-lisp :tangle yes
  (define-key global-map "\C-cr" 'org-capture)
#+end_src

**** Agenda
     Quick access to the agenda via =C-c a=.
#+begin_src emacs-lisp :tangle yes
  (define-key global-map "\C-ca" 'org-agenda)
#+end_src

**** Capturing links
     Press =C-c l= anywhere to store an Org link pointing to the
     nearest anchor point.
#+begin_src emacs-lisp :tangle yes
  ;; Quick link capture
  (define-key global-map "\C-cl" 'org-store-link)
#+end_src

**** metaleft and metaright
     Since I am moving in Evil's normal mode most of the time, remap the =C-c
     C-x l= and =C-c C-x r= so that =l= and =r= are replaced by =h= and =l=.
     #+begin_src emacs-lisp :tangle yes
       (define-key org-mode-map (kbd "C-c C-x h") 'org-metaleft)
       (define-key org-mode-map (kbd "C-c C-x l") 'org-metaright)
       (define-key org-mode-map (kbd "C-c C-x r") nil)
     #+end_src

**** Minor modes for Org buffers
     Activate auto-filling in all Org buffers.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+end_src

*** Links

**** Following links
Org can follow a variety of links, sometimes using external applications for
displaying the linked content.
#+begin_src emacs-lisp :tangle yes
  (setq org-file-apps
        '((auto-mode . emacs)
          (directory . emacs)
          ("\\.mm\\'" . default)
          ("\\.x?html?\\'" . default)))
#+end_src

**** Store by ID whenever possible
By default, capturing links inside Org buffers generates =<file>:<heading>=
type links, ignoring any ID that could have been assigned to the
heading. Make it so that, if an ID is available, that is used for linking.
#+begin_src emacs-lisp :tangle yes
  (setq org-id-link-to-org-use-id 'use-existing)
#+end_src

This also plays nice with [[*Roam][Org Roam]], which uses Org IDs.

*** LaTeX

**** Compiler
Use [[https://www.ctan.org/pkg/latexmk/][latexmk]] for compilation.
#+begin_src emacs-lisp :tangle yes
  (setq org-latex-pdf-process
        (list "latexmk -pdflatex='%latex -shell-escape -interaction=nonstopmode' -pdf -f -output-directory=%o %f"))
#+end_src

**** Inline previews
     Inside graphical clients, inline LaTeX can be previewed by delegating the
     rendering to an external program that is able to convert markup into
     images. By default, this program is ~dvipng~.

     Instead, set it to ~ImageMagick~, since it's almost always present for
     unrelated reasons.
     #+begin_src emacs-lisp :tangle yes
       (setq org-preview-latex-default-process 'imagemagick)
     #+end_src

     Also, do not pollute the disk with preview images. Store all of them under
     a temporary directory under =/tmp=.
     #+begin_src emacs-lisp :tangle yes
       (setq org-preview-latex-image-directory "/tmp/ltximg/")
     #+end_src

**** IEEE transactions class
     #+begin_src emacs-lisp :tangle yes
       (eval-after-load 'ox-latex
         '(progn
            (setq ieetran-org-latex-class '("IEEEtran" "\\documentclass[11pt]{IEEEtran}"
                                            ("\\section{%s}" . "\\section*{%s}")
                                            ("\\subsection{%s}" . "\\subsection*{%s}")
                                            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                            ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                            ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
            (add-to-list 'org-latex-classes ieetran-org-latex-class t)))
     #+end_src

**** Listings
Use the ~listings~ package to export source code.
#+begin_src emacs-lisp :tangle yes
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (add-to-list 'org-latex-packages-alist '("" "color"))
  (setq org-latex-src-block-backend 'listings)
#+end_src

**** Hyperref
Use a modified [[https://www.ctan.org/pkg/hyperref][hyperref]] template (that, more than anything else, colors links
properly and avoids the ugly boxes).
#+begin_src emacs-lisp :tangle yes
  (setq org-latex-hyperref-template
        "\\hypersetup{
         pdfauthor={%a},
         pdftitle={%t},
         pdfkeywords={%k},
         pdfsubject={%d},
         pdfcreator={%c},
         pdflang={%L},
         colorlinks=true}
        ")
#+end_src

*** org-contrib
The [[https://orgmode.org/worg/org-contrib/][org-contrib]] repo provides some utilities that can be used to further enhance
the Org experience. The software contained in this repo has either been
abandoned, it is sporadically maintained or it is simply too small to live
somewhere else.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package org-contrib
    :ensure t
    :config
    <<org-contrib-config>>)
#+end_src

**** ox-extras
Utility functions for the Org exporter. These must be loaded through an ad-hoc
mechanism.
#+begin_src emacs-lisp :tangle no :noweb no-export :noweb-ref org-contrib-config
  (require 'ox-extra)
  (ox-extras-activate
   '(
     <<ox-extras>>))
#+end_src

***** ignore-headlines
Allows the exporter to ignore a headline without ignoring its contents. Useful
for keeping, for example, in-line LaTeX directives stowed away in their own
sections. In order to ignore a heading, this must be marked with the tag
=:ignore:=.
#+begin_src emacs-lisp :tangle no :noweb-ref ox-extras
  ignore-headlines
#+end_src

*** Refile

**** Interactive refiling
Allow refiling via progressive path definitions, but use the completion backend
to construct it.
#+begin_src emacs-lisp :tangle yes
  (setq org-refile-use-outline-path t
        org-outline-path-complete-in-steps nil)
#+end_src
Also allow for creating the refiling target on demand, after asking the user
whether that was their intention.
#+begin_src emacs-lisp :tangle yes
  (setq org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

**** Targets
#+begin_src emacs-lisp :tangle yes
  (setq org-refile-targets `((nil . (:maxlevel . 3))
                             (org-agenda-files . (:level . 1))
                             (,(expand-file-name "scheduler/someday_maybe.org"
                                                  org-directory)
                               . (:level . 1))))
#+end_src

** Shells
Here, we try to configure all the kinds of shells that Emacs can host.
#+begin_src emacs-lisp :tangle yes
  (eval-when-compile
    (require 'esh-mode))
#+end_src

*** Show working dir when launching commands
    When launching commands via =M-!= or =M-&=, the CWD is not
    displayed. Since I often launch the command in the wrong
    directory:
#+begin_src emacs-lisp :tangle yes
  (setq shell-command-prompt-show-cwd t)
#+end_src

*** Don't throw away command output
    If output-producing command are launched in succession, let their
    outputs pile up.
#+begin_src emacs-lisp :tangle yes
  (setq shell-command-dont-erase-buffer 'end-last-out)
#+end_src

*** Dirtrack
    Use the Directory Tracking mode for sticking to the correct
    working directory. Scripts might change it under our nose.
#+begin_src emacs-lisp :tangle yes
  (setq dirtrack-list '("^[^: ]*[: ]\\([^]$%#>]+\\)[]$%#>]" 1))
  (add-hook 'shell-mode-hook
            (lambda ()
              (shell-dirtrack-mode 0)
              (dirtrack-mode)))
#+end_src

*** Read-only output
    (Taken from [[https://snarfed.org/why_i_run_shells_inside_emacs][this article]])

    Once printed, I don't think I have a need to modify the output of
    a commmand. To protect from accidental modifications, put the
    ~read-only~ [[info:elisp#Special Properties][special property]] on it.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'comint-output-filter-functions
            (lambda (text)
              (let ((inhibit-read-only t)
                    (output-end (process-mark (get-buffer-process (current-buffer)))))
                (put-text-property comint-last-output-start output-end 'read-only t))))
#+end_src

*** Scrolling
    On input, scroll to bottom, but only in the window where text is
    actually being inserted. Allow other windows pointing to the same
    buffer to keep their position (useful for holding in view old
    outputs while launching new commands).
#+begin_src emacs-lisp :tangle yes
  (setq comint-scroll-to-bottom-on-input 'this)
#+end_src

*** No duplicates in history
Don't accumulate successive identical commands on the input ring.
#+begin_src emacs-lisp :tangle yes
  (setq comint-input-ignoredups t)
  (setq eshell-hist-ignoredups t)
#+end_src

*** Buffer truncation
Truncate all shell buffers to a maximum of 1024 lines (as per default values of
[[help:comint-buffer-maximum-size][comint-buffer-maximum-size]] and [[help:eshell-buffer-maximum-lines][eshell-buffer-maximum-lines]]).
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'comint-output-filter-functions 'comint-truncate-buffer)
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
#+end_src

*** Autocompletion slowdown on remote shells
    Apparently, [[*Company][Company]] makes things slow inside remote shells (it
    launches a costly PATH search for every verb completion
    opportunity). Disable it in this specific case.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'shell-mode-hook
            (lambda ()
              (when (and (fboundp 'company-mode)
                         (file-remote-p default-directory))
                (company-mode -1))))
#+end_src

*** Eshell
Customization for [[info:eshell#Top][Eshell]], the Emacs shell.

**** Key rebinding
Use the classical keybindings common to other shells (like Bash) while point is
after the prompt.
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'eshell-modules-list 'eshell-rebind)
#+end_src

**** Electric forward slash
Automatically insert TRAMP prefixes when supplying absolute paths.
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'eshell-modules-list 'eshell-elecslash)
#+end_src

**** Use TRAMP su/sudo
Use the built-in TRAMP methods for running commands as other users.
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'eshell-modules-list 'eshell-tramp)
#+end_src

** TRAMP

*** Default method
    Set SCP as the default connection method, since the automatic
    selection of inline vs external method for transferring files
    fails if this is set to SSH.
#+begin_src emacs-lisp :tangle yes
  (setq tramp-default-method "scp")
#+end_src

*** Remote backups
    Use the remote host for hosting backups, following the same policy
    as for [[*Destination of backup files][local backups]].
#+begin_src emacs-lisp :tangle yes
  (setq tramp-backup-directory-alist backup-directory-alist)
#+end_src

**** Issues with cp
    Be aware that this functionality relies on ~cp -p~ being supported
    by the remote environment. This is not always true, especially for
    NFS mounts.

    The following worked as a stopgap measure.
#+begin_example
  #!/bin/bash

  allowed_args=()

  while [[ $# -gt 0 ]]
  do
      case "$1" in
          -p)
              # Void `-p`, hoping that nothing will break because of
              # permissions
              shift
              ;;
          ,*)
              allowed_args+=("$1")
              shift
              ;;
      esac
  done

  exec /usr/bin/cp ${allowed_args[@]}
#+end_example

*** dir-locals
    Enable remote directory-local variables.
#+begin_src emacs-lisp :tangle yes
  (setq enable-remote-dir-locals t)
#+end_src

*** ControlMaster and Compression
    Keep a persistent connection to the remote host open for at least
    600s, and use compression.
#+begin_src emacs-lisp :tangle yes
  (setq tramp-ssh-controlmaster-options
        "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=600 -o Compression=yes")
#+end_src

*** File caching
    Cache more aggressively (10 minutes).
#+begin_src emacs-lisp :tangle yes
  (setq remote-file-name-inhibit-cache 600)
#+end_src

*** Language environment
    Since many of the regexps can only deal with English, force
    English as a language in the environment.
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'tramp-remote-process-environment "LANG=en_US.UTF-8")
#+end_src

*** Connection-local variables
    Here connections profiles are defined. Host associations are a
    private matter, so they are loaded from a separate file.

**** Profile definitions

***** local-bin
Include ~/.local/bin in PATH
#+begin_src emacs-lisp :tangle yes
  (connection-local-set-profile-variables
   'local-bin
   `((tramp-remote-path . ("~/.local/bin" . ,tramp-remote-path))))
#+end_src

***** nixos-wrappers
NixOS places certain binaries (like setuid binaries) in a special directory
created at runtime called =/run/wrappers/bin=. Unfortunately, ~getconf PATH~
returns a PATH that does not contain this directory, preventing these binaries
from being used on remote hosts.

Create a profile that adds this directory back to PATH, while waiting for an
official solution upstream.
#+begin_src emacs-lisp :tangle yes
  (connection-local-set-profile-variables
   'nixos-wrappers
   `((tramp-remote-path . ("/run/wrappers/bin" . ,tramp-remote-path))))
#+end_src

**** Profile associations
#+begin_src emacs-lisp :tangle yes
  (setq conprof-file (expand-file-name "conprof-assoc.el" user-emacs-directory))
  (load conprof-file)
#+end_src

** Tab bar
Use [[info:emacs#Tab Bars][tabs]] to organize frames, which are a little more intuitive and handy in
terminal Emacs, since frames are not explicitly represented by the UI, there.
#+begin_src emacs-lisp :tangle yes
  (tab-bar-mode)
#+end_src

** vc
Shorten the list of version control systems to look for when accessing
directories. It should speed up remote access a little.
#+begin_src emacs-lisp :tangle yes
  (setq vc-handled-backends '(Git CVS SVN))
#+end_src

** Gnus
   - [[https://www.emacswiki.org/emacs/GnusTutorial][Tutorial from the EmacsWiki]]
   - [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org][Tutorial from redguardtoo]]

   Since GNUS lives in a different subsystem, all of its runtime
   configuration is done in =.gnus.el=, instead of here.

*** Hydras
    Add the [[*Hydra][hydras]] suggested [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org][here]].

**** Group buffer
     #+begin_src emacs-lisp :tangle yes
       (eval-after-load 'gnus-group
         '(progn
     #+end_src

***** Topic management
      Create an Hydra for topic management.
      #+begin_src emacs-lisp :tangle yes
           (defhydra hydra-gnus-group-topic (:color blue)
             "
[_n_] New topic    [_s_] Show topic (T s) [_m_] Move group to topic (T m)
[_r_] Rename topic [_h_] Hide topic (T h) [_M_] Move topic
[_d_] Delete topic
"
             ("n" gnus-topic-create-topic)
             ("r" gnus-topic-rename)
             ("d" gnus-topic-delete)
             ("s" gnus-topic-show-topic)
             ("h" gnus-topic-hide-topic)
             ("m" gnus-topic-move-group)
             ("M" gnus-topic-move))
      #+end_src

***** Top-level group hydra
      Use =y= in the =*Group*= buffer to trigger this hydra.
      #+begin_src emacs-lisp :tangle yes
                   (defhydra hydra-gnus-group (:color blue)
                     "
        [_A_] Remote groups (A A) [_g_] Refresh
        [_L_] Local groups        [_\\^_] List servers
        [_U_] (Un)subscribe       [_u_] Unsubscribe at point
        [_c_] Mark all read       [_m_] Compose new mail
        [_G_] Search mails (G G)  [_#_] Mark mail
        [_T_] Topics...
        "
                     ("A" gnus-group-list-active)
                     ("L" gnus-group-list-all-groups)
                     ("U" gnus-group-toggle-subscription)
                     ("u" gnus-group-toggle-subscription-at-point)
                     ("c" gnus-topic-catchup-articles)
                     ("G" dianyou-group-make-nnir-group)
                     ("g" gnus-group-get-new-news)
                     ("^" gnus-group-enter-server-mode)
                     ("m" gnus-group-new-mail)
                     ("#" gnus-topic-mark-topic)
                     ("T" hydra-gnus-group-topic/body)
                     ("q" nil))
                   (define-key gnus-group-mode-map "y" 'hydra-gnus-group/body)))
      #+end_src

**** Summary buffer
     #+begin_src emacs-lisp :tangle yes
       (eval-after-load 'gnus-sum
         '(progn
     #+end_src

***** Message respooling
      Define an hydra for message respooling:
      #+begin_src emacs-lisp :tangle yes
        (defhydra hydra-gnus-summary-respool (:color blue)
          "
[_q_] Query filter [_r_] Respool article [_t_] Query and trace
"
          ("q" gnus-summary-respool-query)
          ("r" gnus-summary-respool-article)
          ("t" gnus-summary-respool-trace)
          ("c" nil "Cancel"))
      #+end_src

***** Top-level summary hydra
      Again, use =y= in a =*Summary*= buffer to trigger the top-level hydra.
      #+begin_src emacs-lisp :tangle yes
        (defhydra hydra-gnus-summary (:color blue)
          "
[_s_] Show thread   [_F_] Forward (C-c C-f)             [_G_] Search mails
[_h_] Hide thread   [_e_] Resend (S D e)                [_t_] Toggle headers
[_n_] Refresh (/ N) [_r_] Reply
[_!_] Mail -> disk  [_R_] Reply with original
[_d_] Disk -> mail  [_w_] Reply all (S w)
[_c_] Read all      [_W_] Reply all with original (S W)
[_#_] Mark          [_B_] Respool...
"
          ("s" gnus-summary-show-thread)
          ("h" gnus-summary-hide-thread)
          ("n" gnus-summary-insert-new-articles)
          ("F" gnus-summary-mail-forward)
          ("!" gnus-summary-tick-article-forward)
          ("d" gnus-summary-put-mark-as-read-next)
          ("c" gnus-summary-catchup-and-exit)
          ("e" gnus-summary-resend-message-edit)
          ("R" gnus-summary-reply-with-original)
          ("r" gnus-summary-reply)
          ("W" gnus-summary-wide-reply-with-original)
          ("w" gnus-summary-wide-reply)
          ("B" hydra-gnus-summary-respool/body)
          ("#" gnus-topic-mark-topic)
          ("G" dianyou-group-make-nnir-group)
          ("t" gnus-summary-toggle-header)
          ("q" nil))
        (define-key gnus-summary-mode-map "y" 'hydra-gnus-summary/body)))
      #+end_src

**** Article mode
     Yet again, use =y= inside article buffers to trigger the hydra.
     #+begin_src emacs-lisp :tangle yes
             (eval-after-load 'gnus-art
               '(progn
                  (defhydra hydra-gnus-article (:color blue)
                    "
[_o_] Save attachment        [_F_] Forward
[_v_] Play video/audio       [_r_] Reply
[_d_] CLI to download stream [_R_] Reply with original
[_b_] Open external browser  [_w_] Reply all (S w)
[_f_] Click link/button      [_W_] Reply all with original (S W)
[_g_] Focus link/button
"
                    ("F" gnus-summary-mail-forward)
                    ("r" gnus-article-reply)
                    ("R" gnus-article-reply-with-original)
                    ("w" gnus-article-wide-reply)
                    ("W" gnus-article-wide-reply-with-original)
                    ("o" gnus-mime-save-part)
                    ("v" w3mext-open-with-mplayer)
                    ("d" w3mext-download-rss-stream)
                    ("b" w3mext-open-link-or-image-or-url)
                    ("f" w3m-lnum-follow)
                    ("g" w3m-lnum-goto)
                    ("q" nil))
                  (define-key gnus-article-mode-map "y" 'hydra-gnus-article/body)))
     #+end_src

**** Message buffers
     While writing a message, press =C-c C-y= to trigger this
     hydra. The hydra is dynamically redefined for each message buffer
     that is opened.
     #+begin_src emacs-lisp :tangle yes
              (eval-after-load 'message
                '(progn
                   (defhydra hydra-message (:color blue)
                     "
[_s_] Send mail (C-c C-c)    [_c_] Complete mail address
[_d_] Save draft (C-c C-d)   [_f_] Attach file
[_k_] Kill message (C-c C-k) [_r_] Encode region in ROT13
"
                     ("s" message-send-and-exit)
                     ("d" message-dont-send)
                     ("k" message-kill-buffer)
                     ("c" counsel-bbdb-complete-mail)
                     ("f" mml-attach-file)
                     ("r" message-caesar-region)
                     ("q" nil))))

              (defun message-mode-hook-hydra-setup ()
                (local-set-key (kbd "C-c C-y") 'hydra-message/body))
              (add-hook 'message-mode-hook 'message-mode-hook-hydra-setup)
     #+end_src

** Winner mode
   Enable [[info:emacs#Window Convenience][winner-mode]] for windows layout undo/redo.
   #+begin_src emacs-lisp :tangle yes
     (winner-mode 1)
   #+end_src

** Special characters

*** Ellipsis
    Use the UTF-8 U+2026 Horizontal Ellipsis '=…=' character for all cases of
    ellipsis.
    #+begin_src emacs-lisp :tangle yes
      (setq truncate-string-ellipsis "…")
    #+end_src

** Histories

*** Minibuffer history
    Save minibuffer history, as simple as that.
    #+begin_src emacs-lisp :tangle yes
      (savehist-mode 1)
    #+end_src

